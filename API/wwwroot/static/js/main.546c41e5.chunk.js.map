{"version":3,"sources":["app/layout/models/pagination.ts","app/layout/api/agent.ts","app/layout/models/activity.ts","app/layout/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/activities/users/LoginForm.tsx","features/activities/errors/ValidationErrors.tsx","features/activities/users/RegisterForm.tsx","features/activities/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/options/categoryOptions.tsx","app/common/form/MySelectInput.tsx","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/activities/errors/TestError.tsx","features/activities/errors/NotFound.tsx","features/activities/errors/ServerError.tsx","app/common/form/modals/ModalContainer.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/form/imageUpload/PhotoWidgetCropper.tsx","app/common/form/imageUpload/PhotoWidgetDropzone.tsx","app/common/form/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","console","log","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhotos","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","setMainPhoto","p","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","PopupContent","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","ItemDescription","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","categoryOptions","MySelectinput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","panes","menuItem","pane","Tab","Pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.546c41e5.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2)\r\n    {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { id } from 'date-fns/locale';\r\nimport { config } from 'process';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../../..';\r\nimport { store } from '../../stores/store';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n\r\n\r\n}, (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n    console.log(error.response);\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\nconst Activities = {\r\n\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params })\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhotos: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>\r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;\r\n","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername?: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n}\r\n\r\nexport class Activity implements Activity{\r\n    constructor(init?: ActivityFormValues){\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}\r\n","import { User } from \"./user\";\r\n\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n   }","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../layout/api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../layout/models/activity\";\r\nimport { Pagination, PagingParams } from \"../layout/models/pagination\";\r\nimport { Profile } from \"../layout/models/profile\";\r\nimport { store } from \"./store\";\r\n\r\n\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                 if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n\r\n    get axiosParams()\r\n    {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n\r\n\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n\r\n                })\r\n\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity }\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n\r\n\r\n\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees =\r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n}","import { isThisQuarter } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport { threadId } from \"worker_threads\";\r\nimport agent from \"../layout/api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../layout/models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhotos(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    /*   updateProfile = async (profile: Partial<Profile>) => {\r\n          this.loading = true;\r\n          try {\r\n              await agent.Profiles.updateProfile(profile);\r\n              runInAction(() => {\r\n                  if (profile.displayName && profile.displayName !== store.userStore.user?.displayName)\r\n                  {\r\n                      store.userStore.setDisplayName(profile.displayName);\r\n                  }\r\n                  this.profile = {...this.profile, ...profile as Profile};\r\n                  this.loading = false;\r\n              })\r\n          } catch (error) {\r\n              console.log(error);\r\n              runInAction(() => this.loading = false);\r\n  \r\n          }\r\n  \r\n      } */\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username,\r\n                predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../layout/api/agent\";\r\nimport { User, UserFormValues } from \"../layout/models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n           \r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n           \r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store{\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore(){\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../layout/models/serverError\";\r\n//import { ServerError } from \"../layout/models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n    \r\n    setToken = (token: string | null) => {   \r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class modalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../layout/models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n    \r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n               .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                   accessTokenFactory: () => store.userStore.user?.token!\r\n               })\r\n               .withAutomaticReconnect()\r\n               .configureLogging(LogLevel.Information)\r\n               .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    \r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                   });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));       \r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n             await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar()\r\n{     const {userStore: {user, logout}} = useStore();\r\n      return (\r\n\r\n          <Menu inverted fixed='top'>\r\n\r\n              <Container>\r\n\r\n                 <Menu.Item as={NavLink} to='/' exact header>\r\n\r\n                     <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}}/>\r\n                      Reactivities\r\n\r\n                      </Menu.Item>\r\n                      <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                      <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                      <Menu.Item>\r\n\r\n                           <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n\r\n                     \r\n                      </Menu.Item>\r\n                      <Menu.Item position='right'>\r\n                          <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                          <Dropdown pointing='top left' text={user?.displayName}>\r\n                              <Dropdown.Menu>\r\n                                     <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} \r\n                                            text='My Profile' icon='user' />\r\n                                     <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                              </Dropdown.Menu>\r\n                          </Dropdown>\r\n                      </Menu.Item>\r\n\r\n\r\n              </Container>\r\n          </Menu>\r\n\r\n\r\n      )\r\n\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n                  <Menu vertical size='large' style={{width: '100%', marginTop: 25}}>\r\n                      <Header icon='filter' attached color='teal' content='Filters' />\r\n                      <Menu.Item \r\n                          content='All Activities' \r\n                          active={predicate.has('all')}\r\n                          onClick={() => setPredicate('all', 'true')}\r\n                      />\r\n                      <Menu.Item \r\n                          content=\"I'm going\" \r\n                          active={predicate.has('isGoing')}\r\n                          onClick={() => setPredicate('isGoing', 'true')}\r\n                      />\r\n                      <Menu.Item \r\n                          content=\"I'm hosting\" \r\n                          active={predicate.has('isHost')}\r\n                          onClick={() => setPredicate('isHost', 'true')}\r\n                      />\r\n                  </Menu>\r\n                  <Header />\r\n                  <Calendar \r\n                       onChange={(date: any) => setPredicate('startDate', date as Date)}\r\n                       value={predicate.get('startDate') || new Date()}\r\n                  />\r\n\r\n\r\n        </>\r\n       \r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Reveal, Button } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/layout/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string)\r\n    {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated=\"move\">\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button \r\n                     fluid \r\n                     color='teal' \r\n                     content={profile.following ? 'Following' : 'Not following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Profile } from '../../app/layout/models/profile';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}: Props) {\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>bio goes here</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile}/>\r\n\r\n        </Card>\r\n    )\r\n\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup, PopupContent } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/layout/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image \r\n                            \r\n                                  size='mini' \r\n                                  circular src={attendee.image || '/assets/user.png'}\r\n                                  bordered\r\n                                  style={attendee.following ? styles : null}\r\n                                  \r\n                            />\r\n                        </List.Item>\r\n\r\n                    }\r\n                >\r\n                   <PopupContent>\r\n                       <ProfileCard profile={attendee}/>\r\n                   </PopupContent>\r\n                </Popup>\r\n\r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, ItemDescription, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/layout/models/activity';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({activity}: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                       <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'}/> \r\n                       <Item.Content>\r\n                           <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                           </Item.Header>\r\n                           <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link> </Item.Description>\r\n                           {activity.isHost && (\r\n                               <ItemDescription>\r\n                                   <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                   </Label>\r\n                               </ItemDescription>\r\n                           )}\r\n                           {activity.isGoing && !activity.isHost  && (\r\n                               <ItemDescription>\r\n                                   <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                   </Label>\r\n                               </ItemDescription>\r\n                           )}\r\n                       </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { Fragment } from 'react';\r\nimport { Header} from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\n\r\n\r\nexport default observer( function ActivityList()\r\n{\r\n    const {activityStore} = useStore();\r\n    const {groupedActivities} = activityStore;\r\n   \r\n\r\n   \r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group,activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                   \r\n                            {activities.map((activity) => (\r\n                \r\n                                 <ActivityListItem key={activity.id} activity={activity} />\r\n                \r\n                            ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n\r\n          \r\n    )\r\n\r\n\r\n\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { PagingParams } from '../../../app/layout/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\n\r\nexport default observer(function ActivityDashboard() {\r\n   const { activityStore } = useStore();\r\n   const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n   const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n   function handleGetNext() {\r\n      setLoadingNext(true);\r\n      setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n      loadActivities().then(() => setLoadingNext(false));\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (activityRegistry.size <= 1) loadActivities();\r\n   }, [activityRegistry.size, loadActivities])\r\n\r\n   return (\r\n\r\n      <Grid>\r\n         <Grid.Column width='10'>\r\n            {activityStore.loadingInitial && !loadingNext ? (\r\n               <>\r\n                  <ActivityListItemPlaceholder />\r\n                  <ActivityListItemPlaceholder />\r\n               </>\r\n            ) : (\r\n               <InfiniteScroll\r\n                  pageStart={0}\r\n                  loadMore={handleGetNext}\r\n                  hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                  initialLoad={false}\r\n               >\r\n                  <ActivityList />\r\n               </InfiniteScroll>\r\n\r\n            )}\r\n\r\n         </Grid.Column>\r\n         <Grid.Column width='6'>\r\n            <ActivityFilters />\r\n         </Grid.Column>\r\n         <Grid.Column width={10}>\r\n            <Loader active={loadingNext} />\r\n         </Grid.Column>\r\n      </Grid>\r\n\r\n   )\r\n\r\n\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field,meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n              <label>{props.label}</label>\r\n              <input {...field} {...props} />\r\n              {meta.touched && meta.error ? (\r\n                  <Label basic color='red' >{meta.error}</Label>\r\n              ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import userEvent from '@testing-library/user-event';\r\nimport { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n               setErrors({error: 'Invalid email or password'}))}\r\n            \r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                               name='error' render={() => \r\n                               <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props)\r\n{\r\n    return (\r\n        <Message error>\r\n        \r\n            {errors && (\r\n                <Message.List>\r\n                     {errors.map((err: any, i: any) => (\r\n\r\n                           <Message.Item key={i}>{err}</Message.Item>\r\n                     ))}\r\n                </Message.List>\r\n\r\n            )}\r\n        </Message>\r\n    )\r\n}","import userEvent from '@testing-library/user-event';\r\nimport { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n               setErrors({error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n            \r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                               name='error' render={() => \r\n                               <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                          loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const {userStore, modalStore} = useStore();\r\n    return (\r\n       <Segment inverted textAlign='center' vertical className='masthead'>\r\n           <Container text>\r\n               <Header as='h1' inverted>\r\n                   <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\r\n                   Reactivities\r\n\r\n               </Header>\r\n               {userStore.isLoggedIn ? (\r\n                   <>\r\n                   <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                      <Button as={Link} to='/activities' size='huge' inverted>\r\n                          Go to Activities!\r\n                      </Button>\r\n                   </>\r\n               ) : (\r\n                   <>\r\n\r\n                    <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                          Login!\r\n                    </Button>\r\n                    <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                          Register!\r\n                    </Button>\r\n\r\n                   </>\r\n\r\n                   )}    \r\n\r\n           </Container>\r\n       </Segment>\r\n          \r\n    )\r\n})","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props){\r\n    return (\r\n\r\n        <Dimmer active={true} inverted={inverted}>\r\n\r\n              <Loader content={content} />\r\n\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field,meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n              <label>{props.label}</label>\r\n              <textarea {...field} {...props} />\r\n              {meta.touched && meta.error ? (\r\n                  <Label basic color='red' >{meta.error}</Label>\r\n              ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions  = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectinput(props: Props) {\r\n    const [field,meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n              <label>{props.label}</label>\r\n              <Select\r\n\r\n                  clearable\r\n                  options={props.options}\r\n                  value={field.value || null}\r\n                  onChange={(e, d) => helpers.setValue(d.value)}\r\n                  onBlur={() =>helpers.setTouched(true)}\r\n                  placeholder={props.placeholder}\r\n\r\n              />\r\n              \r\n              {meta.touched && meta.error ? (\r\n                  <Label basic color='red' >{meta.error}</Label>\r\n              ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps } from 'react-datepicker';\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field,meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n              <DatePicker \r\n                 {...field}\r\n                 {...props}\r\n                 selected={(field.value && new Date(field.value)) || null}\r\n                 onChange={value => helpers.setValue(value)}\r\n                  \r\n              />\r\n              {meta.touched && meta.error ? (\r\n                  <Label basic color='red' >{meta.error}</Label>\r\n              ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, {  useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Button, Header, Label, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Formik, Form, ErrorMessage } from \"formik\";\r\nimport { values } from \"mobx\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport { categoryOptions } from \"../../../app/common/form/options/categoryOptions\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { date } from \"yup\";\r\nimport { Activity, ActivityFormValues } from \"../../../app/layout/models/activity\";\r\n\r\n\r\n\r\nexport default observer(function ActivityForm() {\r\n\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loading, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity!)))\r\n    }, [id, loadActivity]);\r\n\r\n\r\n     function handleFormSubmit(activity: ActivityFormValues) {\r\n      if(!activity.id)\r\n      {\r\n          let newActivity = {\r\n              ...activity,\r\n              id: uuid()\r\n          };\r\n          createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n      } else {\r\n          updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n      }\r\n\r\n    }\r\n\r\n   \r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing >\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />        \r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput \r\n                                placeholderText='Date' \r\n                                name='date' \r\n                                showTimeSelect\r\n                                timeCaption='time'\r\n                                dateFormat ='MMMM d, yyyy h:mm aa'\r\n                                \r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button \r\n                              disabled={isSubmitting || !dirty || !isValid}\r\n                              loading={isSubmitting} floated='right' \r\n                              positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' positive type='button' content='Cancel' />\r\n\r\n\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n\r\n        </Segment>\r\n\r\n    )\r\n\r\n})","import { Formik, Form, Field, FieldProps } from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n\r\n                </Formik>\r\n\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/layout/models/activity';\r\nimport { useStore } from '../../../app/stores/store';\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link}\r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n\r\n                    </>\r\n\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled}\r\n                        loading={loading} onClick={updateAttendance} color='teal'>\r\n                        Join Activity\r\n                    </Button>\r\n                )}\r\n\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/layout/models/activity';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format (activity.date!, 'dd MM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/layout/models/activity';\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n\r\n                    ))}\r\n\r\n\r\n\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\n\r\nimport {Grid} from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nexport default observer( function ActivityDetails()\r\n{\r\n  const {activityStore} = useStore();\r\n  const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n  const {id} =useParams<{id: string}>();\r\n\r\n  useEffect(() => {\r\n\r\n    if (id) loadActivity(id);\r\n    return () => clearSelectedActivity();\r\n  }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n  if(loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return(\r\n \r\n       <Grid>\r\n            <Grid.Column width={10}>\r\n              <ActivityDetailedHeader activity={activity} />\r\n              <ActivityDetailedInfo activity={activity}  />\r\n              <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n       </Grid>\r\n\r\n    )\r\n\r\n\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n               <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react' ;\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer( function ServerError() {\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server-Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                   <Segment>\r\n                       <Header as='h4' content='Stack trace' color='teal' />\r\n                       <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                   </Segment>\r\n            \r\n            \r\n            \r\n            \r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n             <Modal.Content>\r\n                 {modalStore.modal.body}\r\n             </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { UserActivity } from '../../app/layout/models/profile';\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as\r\n            number].pane.key);\r\n    };\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar'\r\n                        content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/$\r\n{activity.category}.jpg`}\r\n                                    style={{\r\n                                        minHeight: 100, objectFit:\r\n                                            'cover'\r\n                                    }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                       floated='left' \r\n                       icon='user' \r\n                       content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n        </Tab.Pane>\r\n    )\r\n})","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props{\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n\r\n\r\n        />         \r\n    )\r\n}","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n\r\n  const dzStyles = {\r\n      border: 'dashed 3px #eee',\r\n      borderColor: '#eee',\r\n      borderRadius: '5px',\r\n      paddingTop: '30px',\r\n      textAlign: 'center' as 'center',\r\n      height: 200\r\n\r\n  }\r\n\r\n  const dzActive = {\r\n      borderColor: 'green'\r\n  }\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n        preview: URL.createObjectURL(file)\r\n    })))\r\n  }, [setFiles])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop image here' />\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header, Image } from 'semantic-ui-react';\r\nimport { useStore } from '../../../stores/store';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\nimport { Cropper } from 'react-cropper';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>}\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Button, Card, Grid, GridColumn, Header, Image, Tab } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/form/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/layout/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto,\r\n        uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash' \r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                                />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/layout/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({ profile }: Props) {\r\n    const { profileStore } = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: 'About', render: () => <Tab.Pane>About Content</Tab.Pane> },\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        { menuItem: 'Events', render: () => <ProfileActivities /> },\r\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n        { menuItem: 'Following', render: () => <ProfileFollowings /> },\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/layout/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({ profile }: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size=\"small\" src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n\r\n                    </>}\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\n// eslint-disable-next-line\n\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport HomePage from '../../features/activities/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/activities/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/activities/errors/NotFound';\nimport ServerError from '../../features/activities/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/form/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if(commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n\n              </Switch>\n            </Container>\n          </>\n        )}\n\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n    <App /> \n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}